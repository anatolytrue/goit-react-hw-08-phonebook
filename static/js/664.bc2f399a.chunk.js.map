{"version":3,"file":"static/js/664.bc2f399a.chunk.js","mappings":"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","sources":["pages/LoginPage/LoginPage.jsx","../node_modules/@mui/icons-material/LoginRounded.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { useLoginUserMutation } from 'redux/auth/auth-operations';\nimport { setLogIn } from 'redux/auth/auth-slice';\nimport {\n  Button, TextField, Box,\n  CircularProgress, IconButton,\n  InputAdornment, OutlinedInput, InputLabel,\n  FormControl\n} from '@mui/material';\nimport LoginRoundedIcon from '@mui/icons-material/LoginRounded';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\n// import Loader from 'components/Loader/Loader';\nimport { toast } from 'react-toastify';\n\n\n  // const navigate = useNavigate();\n  // const [loginUser] = useLoginUserMutation();\n//   const dispatch = useDispatch();\n\n//   const handleSumbitForm = async (values, { resetForm }) => {\n//     const user = await loginUser(values).unwrap();\n//     dispatch(setCredentials(user));\n//     navigate('contacts');\n//     resetForm();\n//   }\n\n//   return (\n//     <div>\n//       <h2>\n//         Please, login to access!\n//       </h2>\n//       <form>\n//         <ul>\n//           <li>\n//             <label htmlFor='email'>Email</label>\n//             <field name=\"email\" type=\"email\" />\n\n//           </li>\n//           <li></li>\n//           <li></li>\n//         </ul>\n//       </form>\n\n//     </div>\n//   )\n// }\n\n\n// export default function LoginPage() {\n//   const navigate = useNavigate();\n//   const [loginUser] = useLoginUserMutation();\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const dispatch = useDispatch();\n\n//   const handleChange = ({ target: { name, value } }) => {\n//     switch (name) {\n//       case 'email':\n//         return setEmail(value);\n//       case 'password':\n//         return setPassword(value);\n//       default:\n//         return;\n//     }\n//   };\n\n// const handleSubmitForm = async (values, { resetForm }) => {\n//     const user = await loginUser(values).unwrap();\n//     dispatch(setCredentials(user));\n//     navigate('/contacts');\n//     resetForm();\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleSubmitForm}>\n//         <label>\n//           <span>Введіть свою електронну адресу</span>\n//           <input\n//             onChange={handleChange}\n//             type=\"email\"\n//             name=\"email\"\n//             value={email}\n//             autoComplete=\"off\"\n//             required\n//           />\n//         </label>\n\n//         <label>\n//           <span>\n//             Введіть пароль\n//             <span>\n//               (мінімум 7 символів, ви ввели {password.length})\n//             </span>\n//           </span>\n//           <input\n//             onChange={handleChange}\n//             type=\"password\"\n//             name=\"password\"\n//             value={password}\n//             autoComplete=\"off\"\n//             required\n//             pattern=\"(?=.*\\d).{7,}\"\n//             title=\"Пароль має містити мінімум 7 символів, цифри або малі букви латинського алфавіту\"\n//           />\n//         </label>\n\n//         <button type=\"submit\">Авторизуватися</button>\n//       </form>\n//     </div>\n//   );\n// }\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n  const [loginUser, { data, isLoading, isSuccess, isError, error }] = useLoginUserMutation();\n\n  const handleShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleHidePassword = e => {\n    e.preventDefault();\n  }\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await loginUser ({ email: email, password: password });\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    if (isSuccess) {\n      dispatch(\n        setLogIn({\n          user: { name: data.user.name, email: data.user.email },\n          token: data.token,\n        })\n      );\n      toast.success('You have logged in successfully!', {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n    }\n\n    if (isError && error?.originalStatus === 400) {\n      toast.error (\"Sorry, we can't find this page!\", {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n    } else if (isError && error?.status === 'FETCH_ERROR') {\n      toast.error(\"Internet is disconnected\", {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n    } else if (isError) {\n      toast.error(\"Something went wrong, please try again later!\", {\n        position: \"top-center\",\n        autoClose: 3000\n      });\n    }\n  },\n  [dispatch, data, isSuccess, isError, error?.originalStatus, error?.status]);\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleSubmit}\n      sx={{\n        padding: '1.6rem',\n        maxWidth: '16rem',\n        display: 'grid',\n        gridTemplateColumns: '1fr',\n        gridGap: '0.4rem',\n        alignItems: 'baseline',\n      }}\n    >\n      <TextField\n        label=\"Mail\"\n        size=\"small\"\n        margin=\"normal\"\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleChange}\n        required\n      />\n      <FormControl variant=\"outlined\">\n        <InputLabel\n          htmlFor='outlined-adornment-password'\n          sx={{lineHeight: '2em'}}\n        >\n          Password\n        </InputLabel>\n        <OutlinedInput\n          id=\"outlined-adornment-password\"\n          type={showPassword ? 'text' : 'password'}\n          label=\"Password\"\n          name='password'\n          value={password}\n          onChange={handleChange}\n          size=\"small\"\n          endAdornment={\n            <InputAdornment position='end'>\n              <IconButton\n                aria-label='toggle password visibility'\n                onClick={handleShowPassword}\n                onMouseDown={handleHidePassword}\n                edge='end'\n              >\n                {showPassword ? <VisibilityOff/> : <Visibility/>}\n              </IconButton>\n            </InputAdornment>\n          }\n          sx={{m: '1rem 0', lineHeight: '4em'}}\n        />\n      </FormControl>\n      <Button\n        variant=\"contained\"\n        type=\"submit\"\n        margin=\"normal\"\n        sx={{ width: '8 rem' }}\n        endIcon={\n          isLoading\n            ? (<CircularProgress size={16} thickness={4} color=\"inherit\" />)\n            : (<LoginRoundedIcon/>)\n        }\n      >\n        LogIn \n      </Button>\n    </Box>\n  )\n\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M10.3 7.7c-.39.39-.39 1.01 0 1.4l1.9 1.9H3c-.55 0-1 .45-1 1s.45 1 1 1h9.2l-1.9 1.9c-.39.39-.39 1.01 0 1.4.39.39 1.01.39 1.4 0l3.59-3.59c.39-.39.39-1.02 0-1.41L11.7 7.7a.9839.9839 0 0 0-1.4 0zM20 19h-7c-.55 0-1 .45-1 1s.45 1 1 1h7c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-7c-.55 0-1 .45-1 1s.45 1 1 1h7v14z\"\n}), 'LoginRounded');\n\nexports.default = _default;"],"names":["LoginPage","useState","email","setEmail","password","setPassword","showPassword","setShowPassword","dispatch","useDispatch","useLoginUserMutation","loginUser","data","isLoading","isSuccess","isError","error","handleSubmit","e","preventDefault","handleChange","target","name","value","useEffect","setLogIn","user","token","toast","position","autoClose","originalStatus","status","component","onSubmit","sx","padding","maxWidth","display","gridTemplateColumns","gridGap","alignItems","label","size","margin","type","onChange","required","variant","htmlFor","lineHeight","id","endAdornment","onClick","onMouseDown","edge","m","width","endIcon","thickness","color","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}